import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

def  pgn="com.spider.tjswsdee"
def countI=16
def name="Teenpatti Spider"
def  channlID="1_1_0_10074"
android {
    compileSdk PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion PROP_BUILD_TOOLS_VERSION

    dexOptions {
        incremental true
        javaMaxHeapSize "4g"
    }


    defaultConfig {
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 1

        versionName "1.0.0"
        //默认包号
        applicationId pgn
        //默认应用名
        resValue "string", "app_name", name
        //默认渠道号
        resValue "string", "channelId", channlID
        //邀请码
        resValue "string", "inviteCode", ""
        //默认游戏icon
        manifestPlaceholders=[icon:"@mipmap/ic_launcher"]

        //忽略lintOptions相关参数,避免打包报错
        lintOptions {
            checkReleaseBuilds false
            abortOnError false
        }

        ndk {
            abiFilters PROP_APP_ABI.split(':')
        }

        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    // skip the NDK Build step if PROP_NDK_MODE is none
                    targets 'cocos2djs'
                    arguments 'NDK_TOOLCHAIN_VERSION=clang'

                    def module_paths = [project.file("../../../cocos2d-x"),
                                        project.file("../../../cocos2d-x/cocos"),
                                        project.file("../../../cocos2d-x/external")]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }

                    arguments '-j' + Runtime.runtime.availableProcessors()
                }
            }
        }
    }




    sourceSets.main {
        java.srcDirs "../src", "src"
        res.srcDirs "../res", 'res'
        jniLibs.srcDirs "../libs", 'libs'
        manifest.srcFile "AndroidManifest.xml"
        assets {
            srcDirs 'assets', 'src/main/assets'
        }
    }

    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "jni/Android.mk"
            }
        }
    }

    signingConfigs {

        release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }

            //动态修改打包数据
            def jsonFile = file('../createCfgTemp.json')
            if (jsonFile.canRead())
            {
                def versionJson =  new groovy.json.JsonSlurper().parseText(jsonFile.text)

                resValue "string", "app_name", versionJson.APP_NAME
                resValue "string", "channelId",versionJson.CHANNELID
                manifestPlaceholders=[icon:versionJson.ICON]
                defaultConfig.applicationId = versionJson.APPLICATIONID
                defaultConfig.versionName = versionJson.VERSIONNAME
            }
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/merged_assets/${variant.dirName}"

    variant.mergeAssets.doLast {
        def sourceDir = "${buildDir}/../../../../.."

        copy {
            from "${sourceDir}"
            include "assets/**"
            include "src/**"
            include "jsb-adapter/**"
            into outputDir
        }

        copy {
            from "${sourceDir}/main.js"
            from "${sourceDir}/project.json"
            into outputDir
        }
    }
}

apply plugin: 'android-junk-code'

androidJunkCode {
    variantConfig {
        release {//变体名称，如果没有设置productFlavors就是buildType名称，如果有设置productFlavors就是flavor+buildType，例如（freeRelease、proRelease）
            packageBase = pgn  //生成java类根包名
            packageCount = countI/2 //生成包数量
            activityCountPerPackage = 3 //每个包下生成Activity类数量
            excludeActivityJavaFile = false //是否排除生成Activity的Java文件,默认false(layout和写入AndroidManifest.xml还会执行)，主要用于处理类似神策全埋点编译过慢问题
            otherCountPerPackage = countI  //每个包下生成其它类的数量
            methodCountPerClass = countI/2  //每个类下生成方法数量
            resPrefix = "junk_"  //生成的layout、drawable、string等资源名前缀
            drawableCount = countI*11  //生成drawable资源数量
            stringCount = countI*5  //生成string数量
        }
    }
}

dependencies {
    implementation fileTree(dir: '../libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: "../../../cocos2d-x/cocos/platform/android/java/libs", include: ['*.jar'])
    implementation project(':libcocos2dx')

    api 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.blankj:utilcode:1.30.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.adjust.sdk:adjust-android:4.33.3'
    implementation 'com.android.installreferrer:installreferrer:2.2'
    //google service
    implementation 'com.google.android.gms:play-services-ads-identifier:18.0.1'
    //facebook投放
    implementation 'com.facebook.android:facebook-android-sdk:16.0.0'

    implementation platform('com.google.firebase:firebase-bom:31.0.2')
    implementation 'com.google.firebase:firebase-analytics'
}
